
configfile: 'config.yaml'

# Data subdirectory requested
if config.get('workdir') is not None:
    if config.get('rootdir') is None or config.get('rootdir') == '.':
        config['rootdir'] = os.getcwd()
    else:
        config['rootdir'] = os.path.abspath(config['rootdir'])
    
    # Get absolute paths to any configuration files
    for k, v in config.items():
        if isinstance(v, str) and os.path.exists(v):
            config[k] = os.path.abspath(v)

    # Make LSF log directory
    logdir = os.path.join(config['workdir'], 'logs')
    if not os.path.exists(logdir):
        os.makedirs(logdir)
    
    workdir: config['workdir']

include: 'rules/sfari_algorithm_integration.rules'
include: 'rules/sfari_dn-check.rules'
include: 'rules/depth_merging.rules'
include: 'rules/sfari_batch_integration.rules'
include: 'rules/sfari_melt_integration.rules'
include: 'rules/sfari_complex_resolution.rules'
include: 'rules/sfari_finalize.rules'

import pandas as pd

BATCH_KEY = pd.read_table(config['batches'], dtype=str)
BATCHES = sorted(BATCH_KEY.batch.unique())

with open(config['chroms']) as clist:
    CHROMS = [c.strip() for c in clist.readlines()]

SOURCES = config['pesr_sources'] + ['depth']
EVIDENCE = 'pesr depth'.split()
RF_STATUS = 'pass raw'.split()

wildcard_constraints:
    source='(' + '|'.join(SOURCES) + ')',
    chrom='(' + '|'.join(CHROMS) + ')',
    batch='(' + '|'.join(BATCHES) + ')',
    rf_status='(' + '|'.join(RF_STATUS) + ')',
    evidence='(' + '|'.join(EVIDENCE) + ')',


rule all:
    input:
        # expand('complex_resolution/resolved_and_merged/SSC.{chrom}.vcf.gz',
               # chrom=CHROMS),
        # expand('batch_integration/depth/link_merged/SSC.{chrom}.vcf.gz', chrom=CHROMS),
        # expand('complex_resolution/resolved_with_melt/SSC.{chrom}.vcf.gz', chrom=CHROMS),
#        expand('complex_resolution/blacklist_filtered/SSC.{chrom}.bed', chrom=CHROMS),
#        expand('complex_resolution/find_redundancies/SSC.redundant.{chrom}.bed', chrom=CHROMS),
        'final_variants/SSC.vcf.gz',
        'final_variants/SSC.bed',
        'callset_stats/SSC.v3.variant_stats.csv',
        'callset_stats/SSC.v3.sample_stats.csv',
