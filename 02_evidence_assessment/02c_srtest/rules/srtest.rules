
import numpy as np
import pysam

AUTOSOMES = [str(x) for x in range(1, 23)]
ALLOSOMES = 'X Y'.split()

def input_vcf(wildcards):
    path='{input_vcfs}/{batch}.{source}.{chrom}.vcf.gz'
    path = path.format(input_vcfs=config['input_vcfs'], batch=wildcards.batch,
                       source=wildcards.source, chrom=wildcards.chrom)
    return path

def get_num_splits(wildcards):
    vcf = pysam.VariantFile(input_vcf(wildcards))
    for i, record in enumerate(vcf):
        continue
    n_records = i + 1
    n_splits = int(np.ceil(n_records / config['variants_per_split']))
    return n_splits

def get_suffix_len(wildcards):
    n_splits = get_num_splits(wildcards)
    return max(int(np.ceil(np.log10(n_splits))), 1)

def vcf_splits(wildcards):
    prefix = 'vcf_splits/{batch}.{source}.{chrom}.'.format(**wildcards)

    suffix_len = get_suffix_len(wildcards)
    suffix = '%%0%dd' % suffix_len
    path = prefix + suffix

    n_splits = get_num_splits(wildcards)
    vcfs = [path % int(i) for i in range(n_splits)]
    return vcfs

rule split_vcf:
    input:
        vcf=input_vcf
    output:
        # touch('split_logs/{batch}.{source}.{chrom}.done'),
        # vcf_splits
        dynamic('vcf_splits/{batch}.{source}.{chrom}.{split}')
    params:
        prefix='vcf_splits/{batch}.{source}.{chrom}.',
        lines=config['variants_per_split'],
        suffix_len=get_suffix_len
    shell:
        """
        zcat {input.vcf} \
          | sed '/^#/d' \
          | sort -R \
          | split -a {params.suffix_len} -d -l {params.lines} - {params.prefix}
        """

rule reheader_splits:
    input:
        header=input_vcf,
        split='vcf_splits/{batch}.{source}.{chrom}.{split}'
    output:
        'vcf_splits/{batch}.{source}.{chrom}.{split}.vcf.gz'
    shell:
        """
        cat \
            <( zcat {input.header} | sed -n -e '/^#/p' ) \
            {input.split} \
          | bgzip -c \
          > {output}
        """

rule srtest_autosomes:
    input:
        vcf='vcf_splits/{batch}.{source}.{chrom}.{split}.vcf.gz'
    output:
        metrics='srtest_splits/{batch}.{source}.{chrom}.{split}.stats',
    wildcard_constraints:
        chrom='(' + '|'.join(AUTOSOMES) + ')'
    shell:
         """
         svtk sr-test {input.vcf} {config[sr_counts]} {output.metrics}
         """

rule make_sex_list:
    output:
        'sex_lists/{batch}.{sex}.list'
    params:
        sex=lambda wildcards: 1 if wildcards.sex == 'male' else 2
    shell:
        """
        awk -v OFS="\\t" '($3=="{wildcards.batch}") {{print $1}}' {config[batch_key]} \
          | fgrep -w -f - {config[famfile]} \
          | awk -v OFS="\\t" '($5=="{params.sex}") {{print $2}}' \
          > {output}
        """

rule srtest_allosomes:
    input:
        vcf='vcf_splits/{batch}.{source}.{chrom}.{split}.vcf.gz',
        whitelist='sex_lists/{batch}.{sex}.list'
    output:
        metrics='srtest_allosomes_splits/{batch}.{source}.{chrom}.{sex}.{split}.stats',
    shell:
         """
         svtk sr-test --samples {input.whitelist} \
            {input.vcf} {config[sr_counts]} {output.metrics}
         """

rule merge_allosomes:
    input:
        males='srtest_allosomes_splits/{batch}.{source}.{chrom}.males.{split}.stats',
        females='srtest_allosomes_splits/{batch}.{source}.{chrom}.females.{split}.stats',
    output:
        metrics='srtest_splits/{batch}.{source}.{chrom}.{split}.stats',
    wildcard_constraints:
        chrom='(' + '|'.join(ALLOSOMES) + ')'
    run:
        males = pd.read_table(input.males)
        females = pd.read_table(input.females)
        if males.shape[0] != females.shape[0]:
            raise Exception('mismatched table sizes')
        if wildcards.chrom == 'Y':
            males.to_csv(output.metrics, sep='\t', index=False)
        else:
            male_only = females.log_pval.isnull()
            females.loc[male_only] = males
            females.to_csv(output.metrics, sep='\t', index=False, na_rep='NA')

rule merge_splits:
    input:
        dynamic('srtest_splits/{batch}.{source}.{chrom}.{split}.stats')
    output:
        'srtest/{batch}.{source}.{chrom}.stats'
    run:
        dfs = []
        for fname in input:
            dfs.append(pd.read_table(fname))
        df = pd.concat(dfs)
        df.to_csv(output[0], index=False, sep='\t')
        
