
import numpy as np

def input_bed(wildcards):
    path='{input_beds}/{batch}.{source}.{chrom}.bed'
    path = path.format(input_beds=config['input_beds'], batch=wildcards.batch,
                       source=wildcards.source, chrom=wildcards.chrom)
    return path


def suffix_len(wildcards):
    """Calculate minimum required suffix length to accomodate variants"""
    bed = input_bed(wildcards)
    with open(bed) as bedfile:
        for i, l in enumerate(bedfile):
            pass
    lines = i + 1
    n_splits = np.ceil(lines / config['rdtest_split_size'])

    return max(int(np.ceil(np.log10(n_splits))), 1)
    

rule split_beds:
    input:
        bed=input_bed
    output:
        splits=dynamic('split_beds/{batch}.{source}.{chrom}.{split}')
    params:
        prefix='split_beds/{batch}.{source}.{chrom}.',
        lines=config['rdtest_split_size'],
        suffix_len=suffix_len
    shell:
        """
        sed '/^#/d' {input.bed} \
          | split -a {params.suffix_len} -d -l {params.lines} - {params.prefix}
        """

# TODO: generate blacklist from batch key
rule RdTest:
    input:
        bed='split_beds/{batch}.{source}.{chrom}.{split}',
    output:
        metrics='split_rdtest/{batch}.{source}.{chrom}.{split}.metrics',
    params:
        whitelist='whitelists/{batch}.list'
    shell:
         """
         Rscript {config[rdtest]} \
           -b {input.bed} \
           -o split_rdtest/ \
           -n {wildcards.batch}.{wildcards.source}.{wildcards.chrom}.{wildcards.split} \
           -c {config[coveragefile]} \
           -m {config[medianfile]} \
           -f {config[famfile]} \
           -w {params.whitelist}
         """

rule merge_rdtest:
    input:
        dynamic('split_rdtest/{batch}.{source}.{chrom}.{split}.metrics')
    output:
        'rdtest/{batch}.{source}.{chrom}.metrics'
    shell:
        """
        cat {input} \
          | sed -r -e '/^chr\\s/d' \
          | sort -k1,1V -k2,2n \
          | cat <(head -n1 {input[0]}) - \
          > {output}
        """
