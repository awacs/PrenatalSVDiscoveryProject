
AUTOSOMES = [str(x) for x in range(1, 23)]
ALLOSOMES = 'X Y'.split()

def input_vcf(wildcards):
    path='{input_vcfs}/{batch}.{source}.{chrom}.vcf.gz'
    path = path.format(input_vcfs=config['input_vcfs'], batch=wildcards.batch,
                       source=wildcards.source, chrom=wildcards.chrom)
    return path

# TODO: generate blacklist from batch key
rule petest_autosomes:
    input:
        vcf=input_vcf
    output:
        metrics='petest/{batch}.{source}.{chrom}.stats',
    wildcard_constraints:
        chrom='(' + '|'.join(AUTOSOMES) + ')'
    shell:
         """
         svtk pe-test {input.vcf} {config[pe_counts]} {output.metrics}
         """

rule make_sex_list:
    output:
        'sex_lists/{batch}.{sex}.list'
    params:
        sex=lambda wildcards: 1 if wildcards.sex == 'male' else 2
    shell:
        """
        awk -v OFS="\\t" '($3=="{wildcards.batch}") {{print $1}}' {config[batch_key]} \
          | fgrep -w -f - {config[famfile]} \
          | awk -v OFS="\\t" '($5=="{params.sex}") {{print $2}}' \
          > {output}
        """

rule petest_allosomes:
    input:
        vcf=input_vcf,
        whitelist='sex_lists/{batch}.{sex}.list'
    output:
        metrics='petest_allosomes/{batch}.{source}.{chrom}.{sex}.stats',
    shell:
         """
         svtk pe-test --samples {input.whitelist} \
            {input.vcf} {config[pe_counts]} {output.metrics}
         """

rule merge_allosomes:
    input:
        males='petest_allosomes/{batch}.{source}.{chrom}.males.stats',
        females='petest_allosomes/{batch}.{source}.{chrom}.females.stats',
    output:
        metrics='petest/{batch}.{source}.{chrom}.stats',
    wildcard_constraints:
        chrom='(' + '|'.join(ALLOSOMES) + ')'
    run:
        males = pd.read_table(input.males)
        females = pd.read_table(input.females)
        if wildcards.chrom == 'Y':
            males.to_csv(output.metrics, sep='\t', index=False)
        else:
            male_only = females.log_pval.isnull()
            females.loc[male_only] = males
            females.to_csv(output.metrics, sep='\t', index=False, na_rep='NA')
