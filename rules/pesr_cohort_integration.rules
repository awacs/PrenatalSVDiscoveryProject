"""
pesr.snake
Matthew Stone <mstone5@mgh.harvard.edu>

Cluster SV called by PE/SR-based algorithms. 
"""

module_config = config['pesr_cohort_integration']

SOURCES = config['pesr_sources']

with open(config['chroms']) as clist:
    CHROMS = [c.strip() for c in clist.readlines()]

with open(config['quads']) as qlist:
    QUADS = [q.strip() for q in qlist.readlines()]

rule rdtest_filter_pesr:
    input:
        vcf='integration/pesr/vcfcluster/{source}/cohort.{chrom}.vcf',
        list='rdtest/{source}/cohort.rdtest_pass.{chrom}.list'
    output:
        cnv='integration/pesr/rdtest_filtered/{source}/cohort.{chrom}.vcf.gz',
        bca='integration/pesr/bca/{source}/cohort.{chrom}.vcf.gz',
    shell:
        """
        fgrep -w -f {input.list} {input.vcf} \
          | cat <(egrep -e "^#" {input.vcf}) - \
          | vcf-sort -c \
          | bgzip -c \
          > {output.cnv};
        fgrep -v -w -f {input.list} {input.vcf} | vcf-sort -c | bgzip -c > {output.bca};
        tabix -p vcf {output.cnv};
        tabix -p vcf {output.bca};
        """

rule make_merged_vcf_list:
    input:
        expand('integration/pesr/{{group}}/{source}/cohort.{{chrom}}.vcf.gz', 
               source=SOURCES)
    output:
        'integration/pesr/vcflists/{group}.vcfs.{chrom}.list'
    run:
        with open(output[0], 'w') as fout:
            for fname in sorted(input):
                fout.write(fname + '\n')

rule vcfcluster_filtered:
    """Cluster calls from a single algorithm across samples."""
    input:
        'integration/pesr/vcflists/{group}.vcfs.{chrom}.list'
    output:
        vcf='integration/pesr/{group}/cohort.{chrom}.vcf',
        #bed='clusterbeds/DLMW.519.{chrom}.bed'
    params:
        **module_config['vcfcluster'],
        prefix='cohort.merged_algs',
    shell:
        """
        vcfcluster {input} {output.vcf} \
            -r {wildcards.chrom} \
            -p {params.prefix} \
            -d {params.min_dist} \
            -f {params.min_recip_frac} \
            -z {params.min_svsize} \
            -x {params.blacklist}
        """

rule make_pesr_svof:
    input:
        'integration/pesr/rdtest_filtered/cohort.{chrom}.vcf',
    output:
        'integration/pesr/rdtest_filtered/cohort.{chrom}.svof'
    shell:
        """
        ./scripts/make_pesr_rdtest_bed.py {input} \
          | sed -e '1d' \
          | awk -v OFS="\\t" '{{split($5, samples, ",");
                                for (i=1; i<=length(samples); i++) {{
                                  print $1, $2, $3, $1, $4, $6, samples[i];
                                }} }}' \
          | cat <(echo "#chrA start end chrB name svtype sample" | sed -e 's/ /\\t/g') - \
          > {output}
        """
