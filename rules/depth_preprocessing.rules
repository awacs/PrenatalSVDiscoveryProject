"""
merge_assess.snake
Matthew Stone <mstone5@mgh.harvard.edu>

"""

with open(config['idmap']) as idmapf:
    idkeys = [line.strip().split() for line in idmapf]
    ID_MAP = dict(idkeys)

with open(config['samples']) as slist:
    SAMPLES = [s.strip() for s in slist.readlines()]

# Filter ID map to samples of interest
ID_MAP = {k: v for k, v in ID_MAP.items() if k in SAMPLES}
SOURCES = config['depth_sources']


rule standardize_cnmops:
    """Use X/Y calls from sex split"""
    input:
        autosomal='data/raw_beds/cnmops/SFARI.519.cohort.bed.gz',
        allosomal='data/raw_beds/cnmops_XY/{sample}/{sample}.allosomes.cnMOPS.merged.{svtype}.bed'
    output:
        'preprocessing/std_beds/cnmops/{sample}.{svtype}.raw.bed'
    params:
        ssc=lambda wildcards: ID_MAP[wildcards.sample]
    shell:
        """
        zcat {input.autosomal} \
            | fgrep {wildcards.sample} \
            | fgrep {wildcards.svtype} \
            | awk -v OFS="\\t" '($1!="X" && $1!="Y") {{print $1, $2, $3, $3-$2, "1", "0", "0"}}' \
            | cat - <(sed -e '/^#/d' {input.allosomal} | awk -v OFS="\\t" '{{print $1, $2, $3, $3-$2, 1, 0, 0}}') \
            > {output};
        """

def raw_cnvnator_bed(wildcards):
    path = 'data/raw_beds/cnvnator/{0}.{1}.win100.bp200.sort.bedpe'
    return path.format(ID_MAP[wildcards.sample], wildcards.svtype)

rule standardize_cnvnator:
    input:
        raw_cnvnator_bed
    output:
        'preprocessing/std_beds/cnvnator/{sample}.{svtype}.raw.bed'
    shell:
        """
        awk -v OFS="\\t" '{{print $1, $2+50, $5+50, $8, "0", "1", "0"}}' {input} > {output};
        """

def raw_genomestrip_bed(wildcards):
    path = 'data/raw_beds/genomestrip/{0}.genomestrip.{1}.bed'
    return path.format(ID_MAP[wildcards.sample], wildcards.svtype)

rule standardize_genomestrip:
    input:
        raw_genomestrip_bed
    output:
        'preprocessing/std_beds/genomestrip/{sample}.{svtype}.raw.bed'
    shell:
        """
        awk -v OFS="\\t" '{{print $1, $2, $3, $4-$3, "0", "0", "1"}}' {input} > {output}
        """

rule concat_standardized_beds:
    input:
        expand('preprocessing/std_beds/{source}/{{sample}}.{{svtype}}.raw.bed', source=SOURCES)
    output:
        'preprocessing/std_beds/merged_algs/{sample}.{svtype}.raw.bed'
    shell:
        """
        cat {input} | sort -k1,1V -k2,2n > {output}
        """ 

rule merge_raw_depth_calls:
    input:
        'preprocessing/std_beds/{source}/{sample}.{svtype}.raw.bed'
    output:
        merged='preprocessing/std_beds/{source}/{sample}.{svtype}.merged.bed' 
    params:
        dist=0
    wildcard_constraints:
        source='(' + '|'.join(SOURCES) + '|merged_algs)'
    shell:
        """
        bedtools merge -i {input} -d {params.dist} -c 4,5,6 -o sum \
            | awk -v OFS="\\t" '{{print $1, $2, $3, $3-$2}}' \
            > {output.merged};
        """

rule caller_coverage:
    input:
        merged='preprocessing/std_beds/merged_algs/{sample}.{svtype}.merged.bed',
        originals=expand('preprocessing/std_beds/{source}/{{sample}}.{{svtype}}.merged.bed', source=SOURCES)
    output:
        'preprocessing/std_beds/merged_algs/{sample}.{svtype}.cov.bed'
    shell:
        """
        bedtools coverage -a {input.merged} -b {input.originals[0]} \
            | cut -f 1-4,8 \
            | bedtools coverage -a stdin -b {input.originals[1]} \
            | cut -f 1-5,9 \
            | bedtools coverage -a stdin -b {input.originals[2]} \
            | cut -f 1-6,10 \
            | awk -v OFS="\\t" '{{print $1, $2, $3, "{wildcards.sample}", $4, $5, $6, $7}}' \
            > {output}
        """

rule concat_merged_depth_calls:
    input:
        expand('preprocessing/std_beds/merged_algs/{sample}.{{svtype}}.cov.bed', sample=SAMPLES)
    output:
        bed='preprocessing/std_beds/merged.{svtype}.bed.gz',
        idx='preprocessing/std_beds/merged.{svtype}.bed.gz.tbi',
    shell:
        """
        cat {input} \
          | sort -k1,1V -k2,2n \
          | awk -v OFS="\\t" '{{$3=$3"\tmerged_"{wildcards.svtype}"_"NR; $5={wildcards.svtype}; print}}' \
          | cat <(echo -e "#chr\\tstart\\tend\\tname\\tsample\\tsvtype\\tcnmops\\tcnvnator\\tgenomestrip") - \
          | bgzip -c \
          > {output.bed};
        tabix -p bed {output.bed}
        """
