"""
pesr.snake
Matthew Stone <mstone5@mgh.harvard.edu>

Cluster SV called by PE/SR-based algorithms. 
"""

SOURCES = config['pesr_sources']

with open(config['chroms']) as clist:
    CHROMS = [c.strip() for c in clist.readlines()]

with open(config['quads']) as qlist:
    QUADS = [q.strip() for q in qlist.readlines()]

rule make_alg_vcf_list:
    input:
        expand('preprocessing/filtered_vcfs/{{source}}.{quad}.vcf.gz',
               quad=QUADS),
    output:
        'integration/pesr/vcflists/vcfs.{source}.list'
    run:
        with open(output[0], 'w') as fout:
            for fname in sorted(input):
                fout.write(fname + '\n')
                

rule vcfcluster_by_alg:
    """Cluster calls from a single algorithm across samples."""
    input:
        'integration/pesr/vcflists/vcfs.{source}.list'
    output:
        vcf='integration/pesr/vcfcluster/{source}/merged.{chrom}.vcf',
        #bed='clusterbeds/DLMW.519.{chrom}.bed'
    params:
        blacklist=config['blacklist'],
        svsize=0,
        prefix='DLMW.519',
        dist=300,
        frac=0.1
    shell:
        """
        vcfcluster {input} {output.vcf} \
            --single-source \
            -p {params.prefix} \
            -r {wildcards.chrom} \
            -d {params.dist} \
            -f {params.frac} \
            -z {params.svsize} \
            -x {params.blacklist}
        """

rule merge_vcfs:
    """Merge chromosome VCFs"""
    input:
        vcfs=expand('integration/pesr/vcfcluster/{{source}}/merged.{chrom}.vcf', chrom=CHROMS)
    output:
        vcf='integration/pesr/vcfcluster/{source}/merged.vcf.gz',
        idx='integration/pesr/vcfcluster/{source}/merged.vcf.gz.tbi',
    params:
        tmpdir='scratch/'
    shell:
        """
        tmpdir=$(mktemp -d -p {params.tmpdir});
        vcf-concat {input.vcfs} | vcf-sort -c -t $tmpdir | bgzip -c > {output.vcf}; 
        tabix -p vcf {output.vcf}; 
        """

rule make_pesr_rdtest_beds:
    input:
        'integration/pesr/vcfcluster/{source}/merged.{chrom}.vcf'
    output:
        'integration/rdtest_beds/{source}/merged.{chrom}.bed'
    shell:
        "./scripts/make_pesr_rdtest_bed.py {input} {output}"


rule rdtest_filter_pesr:
    input:
        vcf='integration/pesr/vcfcluster/{source}/merged.{chrom}.vcf',
        list='rdtest/{source}/merged.rdtest_pass.{chrom}.list'
    output:
        cnv='integration/pesr/rdtest_filtered/cnv/{source}/merged.{chrom}.vcf.gz',
        bca='integration/pesr/rdtest_filtered/bca/{source}/merged.{chrom}.vcf.gz',
        fail='integration/pesr/rdtest_filtered/fail/{source}/merged.{chrom}.vcf.gz',
    shell:
        """
        fgrep -w -f {input.list} {input.vcf} \
          | cat <(egrep -e "^#" {input.vcf}) - \
          | vcf-sort -c \
          | bgzip -c \
          > {output.cnv};
        fgrep -v -w -f {input.list} {input.vcf} \
          | fgrep -e "SVTYPE=DEL" -e "SVTYPE=DUP" \
          | cat <(egrep -e "^#" {input.vcf}) - \
          | vcf-sort -c \
          | bgzip -c \
          > {output.bca};
        for f in {output}; do tabix -p vcf $f; done
        """
       

rule make_merged_vcf_list:
    input:
        expand('integration/{{group}}/{source}/merged.{{chrom}}.vcf.gz', 
               source=SOURCES)
    output:
        'integration/vcflists/{group}.vcfs.{chrom}.list'
    run:
        with open(output[0], 'w') as fout:
            for fname in sorted(input):
                fout.write(fname + '\n')

rule vcfcluster_filtered:
    """Cluster calls from a single algorithm across samples."""
    input:
        'integration/vcflists/{group}.vcfs.{chrom}.list'
    output:
        vcf='integration/{group}/merged_algs/merged.{chrom}.vcf',
        #bed='clusterbeds/DLMW.519.{chrom}.bed'
    params:
        blacklist=config['blacklist'],
        svsize=0,
        prefix='DLMW.519',
        dist=300,
        frac=0.1
    shell:
        """
        vcfcluster {input} {output.vcf} \
            -p {params.prefix} \
            -r {wildcards.chrom} \
            -d {params.dist} \
            -f {params.frac} \
            -z {params.svsize} \
            -x {params.blacklist}
        """

rule make_pesr_svof:
    input:
        'integration/rdtest_filtered/merged_algs/merged.{chrom}.vcf',
    output:
        'integration/rdtest_filtered/pesr/merged.{chrom}.svof'
    shell:
        """
        ./scripts/make_pesr_rdtest_bed.py {input} \
          | sed -e '1d' \
          | awk -v OFS="\\t" '{{split($5, samples, ",");
                                for (i=1; i<=length(samples); i++) {{
                                  print $1, $2, $3, $1, $4, $6, samples[i];
                                }} }}' \
          | cat <(echo "#chrA start end chrB name svtype sample" | sed -e 's/ /\\t/g') - \
          > {output}
        """
