"""
pesr.snake
Matthew Stone <mstone5@mgh.harvard.edu>

Cluster SV called by PE/SR-based algorithms. 
"""

SOURCES = config['pesr_sources']

with open(config['chroms']) as clist:
    CHROMS = [c.strip() for c in clist.readlines()]

with open(config['quads']) as qlist:
    QUADS = [q.strip() for q in qlist.readlines()]

# rule all:
#     input:
#         svof='svof/DLMW.519.svof',
#         clean='clean_splits.done'
#     shell:
#         "rm {input.clean}"

rule make_alg_vcf_list:
    input:
        expand('preprocessing/filtered_vcfs/{{source}}.{quad}.vcf.gz',
               quad=QUADS),
    output:
        'integration/vcfcluster/vcfs.{source}.list'
    run:
        with open(output[0], 'w') as fout:
            for fname in sorted(input):
                fout.write(fname + '\n')
                

rule vcfcluster_by_alg:
    """Cluster calls from a single algorithm across samples."""
    input:
        'integration/vcfcluster/vcfs.{source}.list'
    output:
        vcf='integration/vcfcluster/{source}/merged.{chrom}.vcf',
        #bed='clusterbeds/DLMW.519.{chrom}.bed'
    params:
        blacklist=config['blacklist'],
        svsize=0,
        prefix='DLMW.519',
        dist=300,
        frac=0.1
    shell:
        """
        vcfcluster {input} {output.vcf}\
            -p {params.prefix} \
            -c {wildcards.chrom} \
            -d {params.dist} \
            -r {params.frac} \
            -z {params.svsize} \
            -x {params.blacklist}
        """

rule merge_vcfs:
    """Merge chromosome VCFs"""
    input:
        vcfs=expand('integration/vcfcluster/{{source}}/merged.{chrom}.vcf', chrom=CHROMS)
    output:
        vcf='integration/vcfcluster/{source}/merged.vcf.gz',
        idx='integration/vcfcluster/{source}/merged.vcf.gz.tbi',
    params:
        tmpdir='scratch/'
    shell:
        """
        tmpdir=$(mktemp -d -p {params.tmpdir});
        vcf-concat {input.vcfs} | vcf-sort -c -t $tmpdir | bgzip -c > {output.vcf}; 
        tabix -p vcf {output.vcf}; 
        """

rule make_rdtest_beds:
    input:
        'integration/vcfcluster/{source}/merged.{chrom}.vcf'
    output:
        'integration/rdtest_beds/{source}/merged.{chrom}.bed'
    shell:
        "./scripts/make_rdtest_bed.py {input} {output}"


rule split_melt:
    input:
        'vcfcluster/DLMW.519.{chrom}.vcf'
    output:
        'svof/DLMW.519.{chrom}.svof'
    params:
        source_list='delly,lumpy,manta,wham'
    shell:
        "~/code/svcf/scripts/svcf-melt -s {params.source_list} {input} {output}"

rule merge_melt:
    input:
        expand('svof/DLMW.519.{chrom}.svof', chrom=CHROMS)
    output:
        svof='svof/DLMW.519.svof'
    params:
        source_list='manta,wham'
    shell:
        """
        head -n1 {input[0]} > {output};
        for f in {input}; do sed '1d' $f; done | sort -k1,1V -k2,2n >> {output}
        """

rule clean_splits:
    input:
        vcfs=expand('vcfcluster/DLMW.519.{chrom}.vcf', chrom=CHROMS),
        svofs=expand('svof/DLMW.519.{chrom}.svof', chrom=CHROMS),
        merged_vcf='vcfcluster/DLMW.519.vcf.gz',
        merged_svof='svof/DLMW.519.svof'
    output:
        touch('clean_splits.done')
    shell:
        #"rm {input.vcfs} {input.svofs}"
        "echo clean"
