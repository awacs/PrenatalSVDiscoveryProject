"""
rd_merged.snake
Matthew Stone


Merge depth caller CNV across programs and samples.

Input beds are product of cnv_clean; columns=chr,start,end,svtype,names

1) bedtools merge to collapse CNV across programs within each sample
2) 50% reciprocal overlap across samples
3) bedcluster
"""

SOURCES = config['depth_sources']

with open(config['chroms']) as clist:
    CHROMS = [c.strip() for c in clist.readlines()]

# Intersect merged calls across samples
rule depth_intersect:
    input:
        'preprocessing/std_beds/merged.{svtype}.bed.gz'
    output:
        'integration/depth_intersect/merged.{svtype}.{chrom}.bed.gz'
    params:
        frac=0.8
    shell:
        """
        bedtools intersect \
          -a <(tabix {input} {wildcards.chrom} | cut -f -6) \
          -b <(tabix {input} {wildcards.chrom} | cut -f -6) \
          -wa -wb -loj -r -f {params.frac} | bgzip -c > {output}
        """

# List of unique variant lists necessary for running bedcluster
rule make_depth_variant_lists:
    input:
        'preprocessing/std_beds/merged.{svtype}.bed.gz'
    output:
        'integration/depth_variant_lists/merged.{svtype}.{chrom}.list'
    shell:
        """
        tabix {input} {wildcards.chrom} | cut -f4 > {output}
        """

def variant_prefix(wildcards):
    return 'depth_{0}_{1}'.format(wildcards.svtype, wildcards.chrom)

# Cluster intersected bed
rule bedcluster:
    input:
        intersect_bed='integration/depth_intersect/merged.{svtype}.{chrom}.bed.gz',
        variant_list='integration/depth_variant_lists/merged.{svtype}.{chrom}.list'
    output:
        'integration/bedcluster/merged.{svtype}.{chrom}.svof'
    params:
        prefix=variant_prefix
    shell:
        """
        zcat {input.intersect_bed} \
          | bedcluster {input.variant_list} -p {params.prefix} --merge-coordinates \
          > {output}
        """

# Merge split svofs
rule merge_across_chroms:
    input:
        expand('integration/bedcluster/merged.{{svtype}}.{chrom}.svof', chrom=CHROMS)
    output:
        'integration/svof/depth.{svtype}.svof'
    shell:
        """
        head -n1 {input[0]} > {output};
        for f in {input}; do sed '1d' $f | sort -k1,1V -k2,2n >> {output}; done
        """

rule make_depth_rdtest_beds:
    input:
        'integration/bedcluster/merged.{svtype}.{chrom}.svof'
    output:
        'integration/rdtest_beds/depth/merged.{svtype}.{chrom}.bed'
    run:
        import pandas as pd
        svof = pd.read_table(input[0])
        bed = svof['#chrA start end name svtype'.split()].drop_duplicates()

        # Add samples
        samples = svof.groupby('name')['sample'].agg(lambda s: ','.join(sorted(set(s))))
        samples = samples.rename('samples').reset_index()
        bed = pd.merge(bed, samples, on='name', how='left')

        # Format
        rename = {'#chrA': '#chrom'}
        bed = bed.rename(columns=rename)
        bed['svtype'] = bed.svtype.str.upper()
   
        cols = '#chrom start end name samples svtype'.split()
        bed[cols].to_csv(output[0], sep='\t', index=False)
