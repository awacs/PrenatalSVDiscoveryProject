"""
rd_merged.snake
Matthew Stone


Merge depth caller CNV across programs and samples.

Input beds are product of cnv_clean; columns=chr,start,end,svtype,names

1) bedtools merge to collapse CNV across programs within each sample
2) 50% reciprocal overlap across samples
3) bedcluster
"""

SOURCES = config['depth_sources']
CNV = config['cnv_types']

with open(config['chroms']) as clist:
    CHROMS = [c.strip() for c in clist.readlines()]

# Intersect merged calls across samples
rule depth_intersect:
    input:
        'preprocessing/std_beds/merged.{svtype}.bed.gz'
    output:
        'integration/depth/intersection/merged.{svtype}.{chrom}.bed.gz'
    params:
        frac=0.8
    shell:
        """
        bedtools intersect \
          -a <(tabix {input} {wildcards.chrom} | cut -f -6) \
          -b <(tabix {input} {wildcards.chrom} | cut -f -6) \
          -wa -wb -loj -r -f {params.frac} | bgzip -c > {output}
        """

# List of unique variant lists necessary for running bedcluster
rule make_depth_variant_lists:
    input:
        'preprocessing/std_beds/merged.{svtype}.bed.gz'
    output:
        'integration/depth/variant_lists/merged.{svtype}.{chrom}.list'
    shell:
        """
        tabix {input} {wildcards.chrom} | cut -f4 > {output}
        """

def variant_prefix(wildcards):
    return 'depth_{0}_{1}'.format(wildcards.svtype, wildcards.chrom)

# Cluster intersected bed
rule bedcluster:
    input:
        intersect_bed='integration/depth/intersection/merged.{svtype}.{chrom}.bed.gz',
        variant_list='integration/depth/variant_lists/merged.{svtype}.{chrom}.list'
    output:
        'integration/depth/bedcluster_svtype/merged.{svtype}.{chrom}.svof'
    params:
        prefix=variant_prefix
    shell:
        """
        zcat {input.intersect_bed} \
          | bedcluster {input.variant_list} -p {params.prefix} --merge-coordinates \
          > {output}
        """

# Merge split svofs
rule merge_across_svtypes:
    input:
        expand('integration/depth/bedcluster_svtype/merged.{svtype}.{{chrom}}.svof',
               svtype=CNV)
    output:
        'integration/depth/bedcluster/merged.{chrom}.svof'
    shell:
        """
        head -n1 {input[0]} > {output};
        for f in {input}; do sed '1d' $f | sort -k1,1V -k2,2n >> {output}; done
        """

rule make_depth_rdtest_bed:
    input:
        svof='integration/depth/bedcluster/merged.{chrom}.svof'
    output:
        'integration/depth/rdtest_beds/merged.{chrom}.bed'
    script:
        "scripts/make_depth_rdtest_beds.py"

rule rdtest_filter_depth:
    input:
        svof='integration/depth/bedcluster/merged.{chrom}.svof',
        list='rdtest/depth/merged.rdtest_pass.{chrom}.list'
    output:
        svof='integration/rdtest_filtered/depth/merged.{chrom}.svof'
    shell:
        """
        fgrep -w -f {input.list} {input.svof} \
          | cat <(head -n1 {input.svof}) - \
          > {output}
        """
