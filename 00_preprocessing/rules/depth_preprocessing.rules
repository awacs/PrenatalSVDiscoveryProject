"""
merge_assess.snake
Matthew Stone <mstone5@mgh.harvard.edu>

"""

import pandas as pd

BATCH_KEY = pd.read_table(config['batch_key'], dtype=str)
SOURCES = config['depth_sources']

with open(config['groups']) as glist:
    GROUPS = [g.strip() for g in glist.readlines()]


rule standardize_bed:
    input:
        bed='data/raw_beds/{source}/{sample}.{source}.{svtype}.bed.gz',
    output:
        bed='std_beds/{source}/{sample}.{svtype}.raw.bed'
    wildcard_constraints:
        source='(' + '|'.join(SOURCES) + ')'
    shell:
        """
        zcat {input} \
          | awk -v sample={wildcards.sample} \
                -v svtype={wildcards.svtype} \
                -v source={wildcards.source} \
                -v OFS="\\t" '{{
                  print $1, $2, $3, sample"_"source"_"NR, sample, svtype, source}}' \
          > {output}
        """

rule concat_standardized_beds:
    input:
        expand('std_beds/{source}/{{sample}}.{{svtype}}.raw.bed',
               source=SOURCES)
    output:
        bed='std_beds/alg_union/{sample}.{svtype}.raw.bed'
    shell:
        """
        cat {input} | sort -k1,1V -k2,2n > {output}
        """ 

rule merge_raw_depth_calls:
    input:
        bed='std_beds/alg_union/{sample}.{svtype}.raw.bed'
    output:
        merged='std_beds/alg_union/{sample}.{svtype}.merged.bed' 
    params:
        dist=0
    shell:
        """
        bedtools merge -i {input} -d {params.dist} -c 4,5,6,7 -o distinct \
            > {output.merged};
        """

def get_batched_depth_calls(wildcards):
    samples = BATCH_KEY.loc[(BATCH_KEY.batch == wildcards.batch) &
                            BATCH_KEY['group'].isin(GROUPS), 'sample']
    return expand(rules.merge_raw_depth_calls.output.merged,
                  sample=samples, svtype=wildcards.svtype)

rule concat_merged_depth_calls:
    input:
        get_batched_depth_calls
    output:
        bed='std_beds/{batch}.{svtype}.bed.gz',
        idx='std_beds/{batch}.{svtype}.bed.gz.tbi',
    shell:
        """
        cat {input} \
          | sort -k1,1V -k2,2n \
          | awk -v OFS="\\t" '{{$4="{wildcards.batch}_{wildcards.svtype}_"NR; print}}' \
          | cat <(echo -e "#chr\\tstart\\tend\\tname\\tsample\\tsvtype\\tsources") - \
          | bgzip -c \
          > {output.bed};
        tabix -p bed {output.bed}
        """
